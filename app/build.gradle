apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def keystorePropertiesFile = rootProject.file("./keystore/keystore.properties")
// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()
// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId "com.alanpaine.sphtech"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    //对apk的输出位置及文件名进行自定义
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            if (variant.buildType.name == 'release') {
                variant.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/outapp/${variant.buildType.name}")
                outputFileName = "SphTech_${project.name}_v${defaultConfig.versionName}_${new Date().format("yyyyMMddHHmm")}_${variant.buildType.name}.apk"
            }else if (variant.buildType.name == 'debug'){
                outputFileName = "SphTech_${project.name}_v${defaultConfig.versionName}_${new Date().format("yyyyMMddHHmm")}_${variant.buildType.name}.apk"
            }
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation rootProject.ext.androidx["androidx-appcompat"]
    implementation rootProject.ext.androidx["androidx.core"]
    implementation rootProject.ext.androidx["androidx.constraintlayout"]

    testImplementation rootProject.ext.androidx["junit"]
    androidTestImplementation rootProject.ext.androidx["androidx.test.ext-junit"]
    androidTestImplementation rootProject.ext.androidx["androidx.test.espresso:espresso-core"]
}
